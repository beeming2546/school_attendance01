<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠</title>
  <link rel="stylesheet" href="/style.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
  <style>
  body { font-family: sans-serif; margin-top: 30px; }

  .frame { max-width: 860px; margin: 0 auto; padding: 24px 24px 32px; }

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏ß‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ + QR ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô */
.qr-stack { display: flex; flex-direction: column; align-items: center; }

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏°‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á */
.meta { width: 420px; max-width: 90%; margin: 0 auto 8px; text-align: left; }
.meta-row { display: flex; align-items: baseline; gap: 24px; font-size: 28px; line-height: 1.25; margin-bottom: 8px; }
.meta-label { font-weight: 700; flex: 0 0 180px; }
.meta-value { flex: 1 1 auto; min-width: 0; }

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á QR ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á */
.qr-box { width: 300px; height: 300px;  margin-top: 16px; display: flex; align-items: center; justify-content: center; }
#qrcode canvas { width: 100% !important; height: 100% !important; }
#timer { font-size: 1.25rem; text-align: center; color: #555; margin-top: 10px; }

@media (max-width: 576px) {
  .meta-row { font-size: 22px; gap: 16px; }
  .meta-label { flex-basis: 140px; }
  .qr-box { width: 260px; height: 260px; }
}
</style>
</head>
<body>
  <% if (showNavbar) { %>
    <%- include('partials/navbar', { currentUser: currentUser, currentRole: currentRole }) %>
  <% } %>

<div class="frame">
  <div class="qr-stack">
    <div class="meta">
      <div class="meta-row">
        <div class="meta-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</div>
        <div class="meta-value"><%= classroomName || '-' %></div>
      </div>
      <div class="meta-row">
        <div class="meta-label">‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô</div>
        <div class="meta-value"><%= teacherName || '-' %></div>
      </div>
      <div class="meta-row">
        <div class="meta-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</div>
        <div class="meta-value"><%= displayDate %></div>
      </div>
    </div>

    <div class="qr-box"><div id="qrcode"></div></div>
    <div id="timer">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏Ñ‡πâ‡∏î...</div>
    <p class="text-center text-muted mt-2 mb-0">QR Code ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (one-time)</p>
    <div class="text-center mt-2">
    <small hidden>DEBUG URL: <a id="debug-url" href="#" target="_blank" rel="noopener"></a></small>
  </div>
  </div>
</div>

  <!-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô -->
  <div class="container mt-5">
    <center>
    <h3>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <%= displayDate %></h3>
    </center>
    <div class="d-flex justify-content-center gap-3 mt-2">
      <span class="badge rounded-pill text-bg-success px-3 py-2">
        ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: <span id="present-count"><%= presentCount %></span>
      </span>
      <span class="badge rounded-pill text-bg-danger px-3 py-2">
        ‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: <span id="absent-count"><%= absentCount %></span>
      </span>
  </div>
    <table class="table table-bordered mt-3">
      <thead class="table-light">
        <tr>
          <th>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</th>
          <th>‡∏ä‡∏∑‡πà‡∏≠ - ‡∏™‡∏Å‡∏∏‡∏•</th>
          <th>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</th>
          <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
        </tr>
      </thead>
      <tbody id="student-tbody">
        <% students.forEach(student => { %>
          <tr>
            <td><%= student.studentid %></td>
            <td><%= student.fullname %></td>
            <td><%= student.checkin_time || '-' %></td>
            <td>
              <% if (student.status === 'Present') { %>
                <span class="text-success fw-bold">‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>
              <% } else { %>
                <span class="text-danger fw-bold">‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>
              <% } %>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
    <center><a href="/classroom/view/<%= classroomId %>" class="btn btn-secondary">‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</a></center>
  </div>

  <script>
    // ======= ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å server (‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) =======
    const classroomId  = "<%= classroomId %>";
    const selectedDate = "<%= selectedDate %>";

    const timerElement = document.getElementById('timer');
    const qrContainer  = document.getElementById('qrcode');
    const debugA       = document.getElementById('debug-url');

    const TTL_FALLBACK = 10; // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ backend ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á ttl

    let expiresAtMs  = 0;    // ‡πÄ‡∏ß‡∏•‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (ms)
    let currentToken = null; // token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    function drawQR(url) {
      qrContainer.innerHTML = '';
      QRCode.toCanvas(url, { width: 300 }, (err, canvas) => {
        if (err) return console.error(err);
        qrContainer.appendChild(canvas);
      });
    }

    function renderCountdown() {
      if (!expiresAtMs) return;
      const diffMs  = expiresAtMs - Date.now();
      const secLeft = Math.max(0, Math.ceil(diffMs / 1000));
      timerElement.textContent = `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${secLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
      if (secLeft <= 0) {
        getToken(true); // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‚Üí ‡∏Ç‡∏≠ token ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      }
    }

    // ‡∏î‡∏∂‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (backend ‡∏™‡πà‡∏á {token,url,ttl})
    async function getToken(force = false) {
      try {
        const res  = await fetch(`/qr/${classroomId}/token${force ? '?force=1' : ''}`, { cache: 'no-store' });
        const data = await res.json();

        currentToken = data.token;
        drawQR(data.url);
        debugA.textContent = data.url;
        debugA.href = data.url;

        const ttlSec = Number(data.ttl) || TTL_FALLBACK;
        expiresAtMs  = Date.now() + ttlSec * 1000;
        renderCountdown();
      } catch (err) {
        console.error('‡πÇ‡∏´‡∏•‡∏î token ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
        timerElement.textContent = '‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      }
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
    async function pollStatus() {
      if (!currentToken) return;
      try {
        const res  = await fetch(`/api/qr-status/${classroomId}?token=${encodeURIComponent(currentToken)}`, { cache: 'no-store' });
        const data = await res.json();
        if (data.is_used === true || data.exists === false) {
          await getToken(true);
        }
      } catch (e) {
        console.warn('qr-status error:', e);
      }
    }

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥
    async function refreshAttendanceTable() {
    try {
      const res  = await fetch(`/api/classroom/${classroomId}/attendance?date=${encodeURIComponent(selectedDate)}`, { cache: 'no-store' });
      const data = await res.json();
      if (!data || !data.students) return;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà
      const rows = data.students.map(s => {
        const isPresent  = s.status === 'Present';
        const statusHtml = isPresent
          ? '<span class="badge rounded-pill text-bg-success px-3 py-2">‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>' 
          : '<span class="badge rounded-pill text-bg-danger px-3 py-2">‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>';
        const time = s.checkin_time || '-';
        return `
          <tr>
            <td>${s.studentid}</td>
            <td>${s.fullname}</td>
            <td>${time}</td>
            <td>${statusHtml}</td>
          </tr>
        `;
      }).join('');

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      document.getElementById('student-tbody').innerHTML = rows;

      // üü¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
      const present = (typeof data.present_count === 'number')
        ? data.present_count
        : data.students.filter(s => s.status === 'Present').length;
      const absent = (typeof data.absent_count === 'number')
        ? data.absent_count
        : (data.students.length - present);

      const presentEl = document.getElementById('present-count');
      const absentEl  = document.getElementById('absent-count');
      if (presentEl) presentEl.textContent = String(present);
      if (absentEl)  absentEl.textContent  = String(absent);
    } catch (e) {
      console.error('refreshAttendanceTable error:', e);
    }
  }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    getToken(true);
    setInterval(renderCountdown, 1000);
    setInterval(pollStatus, 1000);
    refreshAttendanceTable();
    setInterval(refreshAttendanceTable, 1000);
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
