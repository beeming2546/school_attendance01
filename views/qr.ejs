<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>QR Code สำหรับเช็กชื่อ</title>
  <link rel="stylesheet" href="/style.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
  <style>
    body { font-family: sans-serif; margin-top: 30px; }
    #qrcode { text-align: center; margin-top: 20px; }
    #timer { font-size: 1.5rem; text-align: center; color: #555; }
    h2, h3 { text-align: center; }
  </style>
</head>
<body>
  <% if (showNavbar) { %>
    <%- include('partials/navbar', { currentUser: currentUser, currentRole: currentRole }) %>
  <% } %>

  <h2>QR Code จะอัปเดตอัตโนมัติ (one-time)</h2>
  <div id="qrcode" class="text-center my-3"></div>
  <div id="timer"  class="text-center text-muted">กำลังเตรียมโค้ด...</div>

  <!-- DEBUG URL -->
  <div class="text-center mt-2">
    <small>DEBUG URL: <a id="debug-url" href="#" target="_blank" rel="noopener"></a></small>
  </div>

  <!-- ตารางรายชื่อนักเรียน -->
  <div class="container mt-5">
    <h3>สถานะการเข้าเรียนวันนี้</h3>
    <table class="table table-bordered mt-3">
      <thead class="table-light">
        <tr>
          <th>รหัสนักเรียน</th>
          <th>ชื่อ - สกุล</th>
          <th>สถานะ</th>
          <th>เวลาเข้าเรียน</th>
        </tr>
      </thead>
      <tbody id="student-tbody">
        <% students.forEach(student => { %>
          <tr>
            <td><%= student.studentid %></td>
            <td><%= student.fullname %></td>
            <td>
              <% if (student.status === 'Present') { %>
                <span class="text-success fw-bold">มาเรียน</span>
              <% } else { %>
                <span class="text-danger fw-bold">ขาดเรียน</span>
              <% } %>
            </td>
            <td><%= student.checkin_time || '-' %></td>
          </tr>
        <% }) %>
      </tbody>
    </table>

    <a href="/classroom/view/<%= classroomId %>" class="btn btn-secondary">ย้อนกลับ</a>
  </div>

  <script>
  // ======= ค่าจาก server (ประกาศครั้งเดียว) =======
  const classroomId  = "<%= classroomId %>";
  const selectedDate = "<%= selectedDate %>";

  const timerElement = document.getElementById('timer');
  const qrContainer  = document.getElementById('qrcode');

  let expiresAtMs   = 0;     // เวลา token หมดอายุ (ms)
  let currentToken  = null;  // token ปัจจุบัน

  // วาด QR จาก URL
  function drawQR(url) {
    qrContainer.innerHTML = '';
    QRCode.toCanvas(url, { width: 220 }, (err, canvas) => {
      if (err) return console.error(err);
      qrContainer.appendChild(canvas);
    });
  }

  // อัปเดตตัวเลขนับถอยหลังจากเวลาจริง
  function renderCountdown() {
    if (!expiresAtMs) return;
    const diffMs  = expiresAtMs - Date.now();
    const secLeft = Math.max(0, Math.ceil(diffMs / 1000));
    timerElement.textContent = `เหลือเวลา ${secLeft} วินาที`;
    if (secLeft <= 0) {
      getToken(true); // หมดเวลา → ขอ token ใหม่ทันที
    }
  }

  // ดึงโทเคนจากเซิร์ฟเวอร์
  async function getToken(force = false) {
    try {
      const res  = await fetch(`/qr/${classroomId}/token${force ? '?force=1' : ''}`, { cache: 'no-store' });
      const data = await res.json();

      currentToken = data.token;

      // วาด QR + อัปเดตลิงก์ดีบัก
      drawQR(data.url);
      const debugA = document.getElementById('debug-url');
      debugA.textContent = data.url;
      debugA.href = data.url;

      // เซ็ตเวลาหมดอายุให้ตรงจากเซิร์ฟเวอร์ ถ้าไม่มีให้ fallback 10 วิ
      if (data.expiresAt) {
        expiresAtMs = new Date(data.expiresAt).getTime();
      } else {
        expiresAtMs = Date.now() + 10_000;
      }

      renderCountdown(); // อัปเดตรอบแรกทันที
    } catch (err) {
      console.error('โหลด token ผิดพลาด:', err);
      timerElement.textContent = 'โหลดโค้ดไม่สำเร็จ';
    }
  }

  // เช็คสถานะโทเคนทุก 1 วิ (ถ้ามีคนยืนยันแล้วให้รีเฟรชทันที)
  async function pollStatus() {
    if (!currentToken) return;
    try {
      const res  = await fetch(`/api/qr-status/${classroomId}?token=${encodeURIComponent(currentToken)}`, { cache: 'no-store' });
      const data = await res.json();
      if (data.is_used === true || data.exists === false) {
        await getToken(true); // ถูกใช้/หมดอายุ → ดึงใหม่
      }
    } catch (e) {
      console.warn('qr-status error:', e);
    }
  }

  // รีเฟรชตารางสถานะนักเรียนทุก 5 วิ
  async function refreshAttendanceTable() {
    try {
      const res  = await fetch(`/api/classroom/${classroomId}/attendance?date=${encodeURIComponent(selectedDate)}`, { cache: 'no-store' });
      const data = await res.json();
      if (!data || !data.students) return;

      const tbody = document.getElementById('student-tbody');
      const rows  = data.students.map(s => {
        const isPresent  = s.status === 'Present';
        const statusHtml = isPresent
          ? '<span class="text-success fw-bold">มาเรียน</span>'
          : '<span class="text-danger fw-bold">ขาดเรียน</span>';
        const time = s.checkin_time || '-';
        return `
          <tr>
            <td>${s.studentid}</td>
            <td>${s.fullname}</td>
            <td>${statusHtml}</td>
            <td>${time}</td>
          </tr>
        `;
      }).join('');
      tbody.innerHTML = rows;
    } catch (e) {
      console.error('refreshAttendanceTable error:', e);
    }
  }

  // เริ่มทำงาน
  getToken(true);
  setInterval(renderCountdown, 1000);
  setInterval(pollStatus, 1000);
  refreshAttendanceTable();
  setInterval(refreshAttendanceTable, 5000);
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
